#!/bin/env bash
set -eu
set -o pipefail

DIR="$(dirname "${BASH_SOURCE[0]}")"

MODE="${1:-test}";
if (( $# > 1)); then shift; fi

FLAG_INSTALL=0

while :; do
  case "${1:-}" in
    '--install') FLAG_INSTALL=1 ;;
    *) break
  esac
  shift
done


TYPST_VERSION="v0.6.0"
TYPST_BASE_URL="https://github.com/typst/typst/releases/download"
TYPST_ARCHIVE="typst-x86_64-unknown-linux-musl.tar.xz"

TYPST_ROOT="$(realpath "$DIR/..")"
export TYPST_ROOT
TEST_ROOT="$(realpath "$DIR/../tests")"
export TEST_ROOT

if hash magick 2>/dev/null; then
  MAGICK_COMPARE="magick compare"
elif hash compare 2>/dev/null; then
  MAGICK_COMPARE="compare"
else
  >&2 echo "Could not find 'magick' nor 'compare' binary. Make sure you have image magick installed and in your PATH."
  exit 1
fi
export MAGICK_COMPARE

function typst_compile()
{
  typst compile --root "$TYPST_ROOT" "${@}"
}
export -f typst_compile

function install_typst()
{
  if [[ "$OSTYPE" != "linux"* ]]; then
    >&2 echo "Automatic installation of typst on a non linux system is currently unsupported."
    exit 1
  fi

  #TMP="$(mktemp -d)"
  TMP="${TMP:-/tmp}/typst-${TYPST_VERSION}"
  if mkdir -p "$TMP" 2> /dev/null ; then
    local PKG="${TMP}/typst.tar.xz"

    echo "Installing typst from $TYPST_BASE_URL/$TYPST_ARCHIVE"
    wget "${TYPST_BASE_URL}/${TYPST_VERSION}/${TYPST_ARCHIVE}" \
         --quiet \
         -O "$PKG"
    mkdir -p "${TMP}/typst"
    tar -xf "$PKG" -C "${TMP}/typst" --strip-components=1
    rm "$PKG"
  fi

  PATH="${TMP}/typst/:$PATH"
  export PATH
}

if [[ "$FLAG_INSTALL" == "1" ]]; then
  install_typst
fi

if ! hash typst; then
  >&2 echo "Could not find 'typst' binary. Run this script with the --install argument to temporarily install typst."
  exit 1
fi

function img_compare()
{
  $MAGICK_COMPARE -metric rmse "$1" "$2" null: 2>&1 | cut -d\  -f1
}
export -f img_compare

function update_test_ref()
{
  if [[ "$1" == "$TEST_ROOT" ]]; then
    return
  fi
  (
    cd "$1"
    local NAME
    NAME="$(basename "$1")"

    echo "[UPDATING] ${NAME}"

    if [[ -f test.typ ]]; then
      typst_compile test.typ res.png
    else
      echo "[SKIP    ] Missing test.typ!"
    fi
    
    cp "res.png" "ref.png"
  )
}
export -f update_test_ref

TEST_FAIL=0
TEST_OK=0

function run_test()
{
  if [[ "$1" == "$TEST_ROOT" ]]; then
    return
  fi
  if (
    cd "$1"
    local NAME
    NAME="$(basename "$1")"

    echo "[TEST] ${NAME} ..."

    if [[ ! -f test.typ ]]; then
      echo "[SKIP] Missing file '$1/test.typ'!"
    else
      typst_compile test.typ res.png

      if [[ $(img_compare res.png ref.png) != 0 ]] ; then
        $MAGICK_COMPARE -compose src res.png ref.png diff.png || true
        echo "[FAIL] see $(pwd)/diff.png for differences"
        exit 1
      else
        echo "[  OK]"
        exit 0
      fi
    fi);
  then
    TEST_OK=$((TEST_OK + 1))
  else
    TEST_FAIL=$((TEST_FAIL + 1))
  fi
}
export -f run_test

echo "Typst: $(typst --version)"

if ! hash parallel 2>/dev/null; then
  function parallel() {
    xargs -n 1 -I {} bash -c "$1"
  }
fi

function tests() {
  find "$TEST_ROOT" -type d
}
if [[ "$MODE" == "test" ]]; then
  tests | parallel 'run_test {}'
elif [[ "$MODE" == "update" ]]; then
  tests | parallel 'update_test_ref {}'
else
  echo "Unknown mode '$MODE'"; exit 1
fi

# Optional tests
if hash typos 2>/dev/null; then
  echo "[TEST] typos"
  if typos --format brief --exclude "/deps/*"; then
    echo "[  OK]"
  else
    echo "[WARN]"
  fi
else
  echo "[SKIP] typos"
  echo "[    ] You can install 'typos' via 'cargo install typos-cli'."
fi
