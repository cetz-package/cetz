#!/bin/env bash
set -eu
set -o pipefail

DIR="$(dirname "${BASH_SOURCE[0]}")"

MODE="${1:-test}";
if (( $# > 0)); then shift; fi

# Test filter strings
FILTER="${*}"
FILTER="${FILTER// /|}"
if [[ -n "$FILTER" ]]; then
  echo "Filter: $FILTER"
fi
export FILTER

TYPST_ROOT="$(realpath "$DIR/..")"
export TYPST_ROOT
TEST_ROOT="$(realpath "$DIR/../tests")"
export TEST_ROOT

if hash magick 2>/dev/null; then
  MAGICK_COMPARE="magick compare"
elif hash compare 2>/dev/null; then
  MAGICK_COMPARE="compare"
else
  >&2 echo "Could not find 'magick' nor 'compare' binary. Make sure you have image magick installed and in your PATH."
  exit 1
fi
export MAGICK_COMPARE

function typst_compile()
{
  typst compile --root "$TYPST_ROOT" "${@}"
}
export -f typst_compile

if ! hash typst; then
  >&2 echo "Could not find 'typst' binary."
  exit 1
fi

# Compare two image files $1 and $2 using ImageMagick
function img_compare()
{
  $MAGICK_COMPARE -metric rmse "$1" "$2" null: 2>&1 | cut -d\  -f1
}
export -f img_compare

# Update a single tests reference image
#
# Arguments
#   - test_dir: Directory of the test to update. Must contain test.typ
function update_test_ref()
{
  if [[ "$1" == "$TEST_ROOT" ]]; then
    return
  fi
  (
    cd "$1"
    local NAME
    NAME="$(realpath "$1" --relative-to "$TEST_ROOT")"

    echo "[UPDATING] ${NAME}"

    if [[ -f test.typ ]]; then
      typst_compile test.typ res.png
    else
      echo "[SKIP    ] Missing test.typ!"
    fi

    cp "res.png" "ref.png"
  )
}
export -f update_test_ref

TEST_FAIL=0
TEST_OK=0

# Run a single test
#
# Arguments
#   - test_dir: Directory of the test. Must contain test.typ + ref.png
function run_test()
{
  if [[ "$1" == "$TEST_ROOT" ]]; then
    return
  fi
  if (
    cd "$1"
    local NAME
    NAME="$(realpath "$1" --relative-to "$TEST_ROOT")"

    echo "[TEST] ${NAME} ..."

    if [[ ! -f test.typ ]]; then
      echo "[SKIP] Missing file '$1/test.typ'!"
    else
      typst_compile test.typ res.png

      if [[ $(img_compare res.png ref.png) != 0 ]] ; then
        $MAGICK_COMPARE -compose src res.png ref.png diff.png || true
        echo "[FAIL] see $(pwd)/diff.png for differences"
        exit 1
      else
        echo "[  OK]"
        exit 0
      fi
    fi);
  then
    TEST_OK=$((TEST_OK + 1))
  else
    TEST_FAIL=$((TEST_FAIL + 1))
    exit 1
  fi
}
export -f run_test

echo "Typst: $(typst --version)"

# If gnu-parallel is not installed,
# we fake it by forwarding it's call to xargs
if ! hash parallel 2>/dev/null; then
  function parallel() {
    xargs -I {} bash -c "$1"
  }
fi

# Collects all test directories. A directory is a test dir. if it
# contains a file called test.typ.
function tests() {
  if [[ -z "$FILTER" ]]; then
    find "$TEST_ROOT" -type f -name "test.typ" -exec dirname {} \;
  else
    find "$TEST_ROOT" -type f -name "test.typ" -exec dirname {} \; \
      | grep -E "${FILTER:-*}"
  fi
}

if [[ "$MODE" == "test" ]]; then
  tests | parallel 'run_test {}'
elif [[ "$MODE" == "update" ]]; then
  tests | parallel 'update_test_ref {}'
else
  echo "Unknown mode '$MODE'"; exit 1
fi

# Optional tests
if hash typos 2>/dev/null; then
  echo "[TEST] typos"
  if typos --format brief --exclude "/deps/*"; then
    echo "[  OK]"
  else
    echo "[WARN]"
  fi
else
  echo "[SKIP] typos"
  echo "[    ] You can install 'typos' via 'cargo install typos-cli'."
fi
